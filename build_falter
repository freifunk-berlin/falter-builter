#!/bin/bash

# shellcheck disable=SC2155
# shellcheck disable=SC1091

# do not use 'set -e'. It will abort a whole build if, i.e. the
# memory of a single 4MB-Device exceeds.
# set -e
set -o pipefail

REALPATH_SCRIPT=$(realpath "$0")
export BUILTER_DIR=$(dirname "$REALPATH_SCRIPT")

RELEASE_LINK_BASE="https://downloads.openwrt.org/releases/"

# General variables
FALTER_REPO_BASE="src/gz openwrt_falter https://firmware.berlin.freifunk.net/feed/"
FREIFUNK_RELEASE=""
export OPENWRT_TOH="https://openwrt.org/_media/toh_dump_tab_separated.gz"

# list of packages, that get omitted on 8 MiB devices
export OMIT_LIST_8MiB="
    mtr
    iperf3
    tmux
    vnstat
    "
# list of devices, that have technically 16 MiB flash, but have two partitions a 8 MiB
export OVERRIDE_TO_8MiB="
    ubnt_unifiac-mesh
"
# script dependencies (Debian/Ubuntu-centric)
SCRIPT_DEPENDS="awk curl gawk grep git gettext printf python3 rsync sed unzip wget sqlite3"

source ./lib.bash

##################
#   CMD-PARSER   #
##################

print_usage() {
    echo "Usage:

  $0 {p|v|t|s|p|d} [ARG...]

Options:

  -p [PATH]
    give a path to the packageset

  -v [VERSION]
    Falter-release to be used. i.e. '1.2.2' or '1.2.3-snapshot', etc.
    Maps directly to the directories at https://firmware.berlin.freifunk.net/feed/

  -t [TARGET]
    target like 'ath79'

  -s [SUBTARGET]
    something like 'generic'. This is optional.

  -r [ROUTER-PROFILE]
    give a router-profile like 'glinet_gl-ar150'. This is optional.

  -l
    shows a list of the routers avaiable in that target and
    their profile name. This name is the input for '-r'.

  -d
    use development-feeds instead of release-feeds

  -i
    use custom image-builder instead of standart-openwrt ones.

" >&2
}

# check for getopt
type getopts >/dev/null || echo "falter-builter needs \"getopts\" for running. Please install it on your system."

if [ $# -le 0 ]; then
    print_usage
    exit 1
fi

while getopts dp:v:t:s:r:i:lh option; do
    case $option in
    d)
        echo "using dev-feeds."
        FALTER_REPO_BASE="$FALTER_REPO_BASE""new/"
        ;;
    p)
        if [[ "$OPTARG" != -* ]]; then
            echo "Packagset is: $OPTARG"
            PARSER_PACKAGESET="$OPTARG"
        else
            echo "Please specify a packageset with option '-p'."
            exit 1
        fi
        ;;
    v)
        if [[ "$OPTARG" != -* ]]; then
            echo "Falter-version is: $OPTARG"
            PARSER_FALTER_VERSION="$OPTARG"
        else
            echo "Please specify a falter-version with '-v'."
            exit 1
        fi
        ;;
    t)
        if [[ "$OPTARG" != -* ]]; then
            IFS='/' read optt optst <<< "$OPTARG"
            echo "Target is: $optt"
            PARSER_TARGET="$optt"
            if [ -n "$optst" ]; then
                echo "Sub-Target is: $optst"
                PARSER_SUBTARGET="$optst"
            fi
        else
            echo "Please give a target with '-t'."
            exit 1
        fi
        ;;
    s)
        if [[ "$OPTARG" != -* ]]; then
            echo "Sub-Target is: $OPTARG"
            PARSER_SUBTARGET="$OPTARG"
        else
            echo "Please give a subtarget with option '-s'."
            exit 1
        fi
        ;;
    r)
        if [[ "$OPTARG" != -* ]]; then
            echo "Router is: $OPTARG"
            PARSER_PROFILE="$OPTARG"
        fi
        ;;
    i)
        if [[ "$OPTARG" != -* ]]; then
            echo "Use Custom Imagebuilder at: $OPTARG"
            IMAGE_BUILDER_PATH="$OPTARG"
        fi
        ;;
    l)
        PARSER_LIST_ROUTERS="y"
        ;;
    h)
        print_usage
        exit 0
        ;;
    *)
        print_usage
        exit 2
        ;;
    esac
done

# for nice looking output...
printf "\n"

# check if we got all options we would need.
if [ -z "$PARSER_FALTER_VERSION" ] || [ -z "$PARSER_TARGET" ] || [ -z "$PARSER_SUBTARGET" ] || [ -z "$PARSER_PACKAGESET" ]; then
    printf "Please specify at least theses options:\n\
    -v\t[falter-version],\n\
    -p\t[packagelist],\n\
    -t\t[target],\n\
    -s\t[subtarget]\n\n"
    exit 1
fi

# check for dependencies.
for DEP in $SCRIPT_DEPENDS; do
    if ! type "$DEP" &>/dev/null; then
        echo "$DEP is not installed, but needed for this script."
        exit 1
    fi
done

print_banner

# repository derives directly from the falter-version. Download freifunk_release
# file and determine openwrt-version by its variables
BASE_URL=$(echo "$FALTER_REPO_BASE" | cut -d' ' -f 3)
FEEDURL="$BASE_URL$PARSER_FALTER_VERSION/packages/mips_24kc/falter/"
if ! curl --silent --fail "$FEEDURL" >/dev/null; then
    echo "Error: failed retrieving feed URL. Wrong version '$PARSER_FALTER_VERSION'?"
    exit 2
fi

COMMONFILEURL=$FEEDURL$(curl -s "${FEEDURL}"/Packages | sed -n '/falter-common$/,/^$/p' | awk '{if(/Filename: /) print $2}')
TMP=$(curl -s "$COMMONFILEURL" | tar xzOf - ./data.tar.gz | tar xzOf - ./etc/freifunk_release)
eval "$TMP"

function start_build {
    # use local imagebuilder if it was given
    if [ -n "$IMAGE_BUILDER_PATH" ]; then
        IMAGE_BUILDER_URL=$IMAGE_BUILDER_PATH
    else
        IMAGE_BUILDER_URL="$1"
    fi

    local TMP=$2 # slice packageset-name from path
    local PKG_SET=$(echo "$TMP" | rev | cut -d'/' -f1 | rev | cut -d'.' -f1)
    local DEVICE=$3

    FILENAME=$(basename "$IMAGE_BUILDER_URL")
    FOLDERNAME=$(basename "$FILENAME" .tar.xz)
    BRANCH=$(derive_branch_from_url "$IMAGE_BUILDER_URL")
    [ -z "$BRANCH" ] && BRANCH="snapshot"

    echo "building using: $IMAGE_BUILDER_URL"
    echo "selected branch: $BRANCH"

    if [ -z "$IMAGE_BUILDER_PATH" ]; then
        # store imagebuilders in cache. Reload, if there is a newer version avaiable
        local CACHE="../imagebuilder_cache"
        if [ ! -d $CACHE ]; then mkdir -p $CACHE; fi
        cd $CACHE || exit 2

        printf "loading imagebuilder from the internet, if newer...\n"
        wget -q -N --no-if-modified-since "$IMAGE_BUILDER_URL"
        cd ../build || exit 2
        printf "\tdone.\n"

        printf "pull imagebuilder from cache-dir\n"
        cp "../imagebuilder_cache/$FILENAME" "$FILENAME"
        printf "\tdone.\n"
    else
        printf "copy local imagebuilder to build-directory..."
        cp "../$IMAGE_BUILDER_PATH" "$FILENAME"
        printf "\tdone.\n"
    fi

    printf "Extracting imagebuilder...\n"

    rm -rf "$FOLDERNAME" ib
    tar -xJf "$FILENAME"
    mv "$FOLDERNAME" ib
    FOLDERNAME="ib"
    printf "\tdone.\n"

    cd "$FOLDERNAME" || exit 2
    printf "start patching imagebuilder...\n"
    patch_buildsystem
    printf "\tdone.\n"

    if [ "$PARSER_LIST_ROUTERS" == "y" ]; then
        # if ask for, show avaiable router-profiles and quit
        printf "\n\n\n"
        make info | sed -e '/Packages:/d;/hasImageMetadata:/d'
        exit 0
    fi

    # Target is in different position in the URL, depending on the OpenWrt version.
    case $BRANCH in
    snapshot)
        ispos=7
        ;;
    *)
        ispos=8
        ;;
    esac
    # when using custom imagebuilder, the target is on 8th position everytime.
    if [ -n "$IMAGE_BUILDER_PATH" ]; then
        ispos=8
    fi

    INSTR_SET=$(grep "openwrt_base" repositories.conf | awk -F'/' "{print \$$ispos}")
    echo "selected instruction set: $INSTR_SET"

    REPO="$FALTER_REPO_BASE/$PARSER_FALTER_VERSION/packages/$INSTR_SET/falter"
    echo "injecting repo line: $REPO"
    echo "$REPO" >>repositories.conf

    # the hexadecimal number represents the fringerprint of the key. Refer to third section of https://openwrt.org/docs/guide-user/security/keygen#generate_usign_key_pair
    local URL="https://firmware.berlin.freifunk.net/feed/packagefeed_master.pub"
    local FINGERPRINT="61a078a38408e710"
    echo "loading package-feed key from $URL..."
    mkdir -p keys
    curl -s "$URL" >"keys/$FINGERPRINT"

    # check, if we really got a key
    if ! grep "untrusted comment:" "keys/$FINGERPRINT" >/dev/null; then
        echo -e "\nThe loaded file apparently doesn't contain a valid key!\n"
        exit 2
    fi
    printf "\tdone.\n"

    generate_embedded_files "$BRANCH" "$URL" "$FINGERPRINT"
    if [ -z "$DEVICE" ]; then
        for profile in $(make info | grep ":$" | cut -d: -f1 | grep -v "Available Profiles" | grep -v "Default"); do
            echo "start building $profile..."

            modify_packagelist "$profile"

            make image PROFILE="$profile" PACKAGES="$PACKAGE_SET_DEVICE" FILES="../../embedded-files/" EXTRA_IMAGE_NAME="freifunk-falter-${FREIFUNK_RELEASE}"
            PACKAGE_SET_DEVICE="" # empty packageset for use with next wave1-device
            echo "finished."
        done
    else
        echo "start building $DEVICE..."

        modify_packagelist "$DEVICE"

        make image PROFILE="$DEVICE" PACKAGES="$PACKAGE_SET_DEVICE" FILES="../../embedded-files/" EXTRA_IMAGE_NAME="freifunk-falter-${FREIFUNK_RELEASE}"
        PACKAGE_SET_DEVICE=""
    fi
    # move binaries into central firmware-dir, sort them for packagesets, there was given one.
    if [ "$PKG_SET" ]; then
        rsync -a --remove-source-files bin/targets/* "../../firmwares/$PKG_SET/"
    else
        rsync -a --remove-source-files bin/targets/* ../../firmwares/
    fi

    cd ..
}

##############
#    MAIN    #
##############

export PARSER_OWT=$(derive_underlying_openwrt_version "$FREIFUNK_OPENWRT_BASE")

if [ "$PARSER_PACKAGESET" == "all" ]; then
    # split off "-snapshot" for stable-release-snapshots, so we can use the designated stable-packagelist
    if echo "$FREIFUNK_RELEASE" | grep "snapshot\|rc"; then
        ff_release=$(echo "$FREIFUNK_RELEASE" | cut -d'-' -f1)
    else
        ff_release="$FREIFUNK_RELEASE"
    fi

    # build all imageflavours. For this, get paths of packagesets
    # fetch paths of packagelists (depends on openwrt-version). If not unique, chose most recent version of possibilities.
    PSET_PATHS=$(find packageset | sort | grep -e "/$ff_release" | grep .txt | tail -n3)

    if [ -z "$PSET_PATHS" ]; then
        echo "There aren't packagesets defined for this version. Please give a packagelist explicitly!"
        exit 1
    fi

    echo "Packagelists to be build:"
    echo "$PSET_PATHS"
else
    read_packageset "$PARSER_PACKAGESET"
fi

# remove artifacts of last build
printf "cleaning build-directory...\n"
mkdir -p firmwares
rm -rf firmwares/*
mkdir -p build
rm -rf build/*
sleep 3 # avoid strange issues with database...
cd build || exit 2
printf "\tdone.\n"

# read command-line parameters
# ToDo: unifi the variable names later on...
# CONF_RELEASE="$PARSER_OWT"
CONF_TARGET="$PARSER_TARGET"
CONF_SUBTARGET="$PARSER_SUBTARGET"
CONF_DEVICE="$PARSER_PROFILE"

# get OpenWrt ToH
build_router_db

# if openwrt_base is "master": change to "snapshots". That is the correct
# directory for downloading openwrt-master
if [ "$FREIFUNK_OPENWRT_BASE" == "master" ]; then
    RELEASE_LINK_BASE="https://downloads.openwrt.org/"
    FREIFUNK_OPENWRT_BASE="snapshots"
fi

if [ -z "$CONF_TARGET" ] && [ -z "$IMAGE_BUILDER_PATH" ]; then
    # build one release for all targets
    RELEASE_LINK="$RELEASE_LINK_BASE""$FREIFUNK_OPENWRT_BASE""/targets/"
    for target in $(fetch_subdirs "$RELEASE_LINK"); do
        for subtarget in $(fetch_subdirs "$RELEASE_LINK$target"); do
            imagebuilder=$(fetch_subdirs "$RELEASE_LINK$PARSER_PROFILE$target$subtarget" | grep imagebuilder)
            start_build "$RELEASE_LINK$target$subtarget$imagebuilder"
        done
    done
    exit
else
    # there was given a release and a target
    RELEASE_LINK="$RELEASE_LINK_BASE""$FREIFUNK_OPENWRT_BASE""/targets/"
    # if there was defined a subtarget and option device, only build that.
    if [ -n "$CONF_SUBTARGET" ] || [ -n "$IMAGE_BUILDER_PATH" ]; then
        # build directly that subtarget. if requested, for all image types.
        TARGET_LIST="$RELEASE_LINK$CONF_TARGET/$CONF_SUBTARGET/"
        IMAGEBUILDER=$(fetch_subdirs "$TARGET_LIST" | grep imagebuilder)
        if [ "$PSET_PATHS" ]; then
            for PKG_SET in $PSET_PATHS; do
                echo "-> building three packagelists..."
                read_packageset "../$PKG_SET"
                start_build "$TARGET_LIST$IMAGEBUILDER" "$PKG_SET" "$CONF_DEVICE"
            done
        else
            echo "-> building one packagelist only..."
            # "targets" is on purpose there. Otherwise that positonal argument would be empty.
            start_build "$TARGET_LIST$IMAGEBUILDER" targets "$CONF_DEVICE"
        fi
        exit
    fi
    # otherwise, fetch all subtargets and build them one after another.
    for subtarget in $(fetch_subdirs "$RELEASE_LINK$CONF_TARGET/"); do
        imagebuilder=$(fetch_subdirs "$RELEASE_LINK$CONF_TARGET/$subtarget" | grep imagebuilder)
        if [ "$PSET_PATHS" ]; then
            for PKG_SET in $PSET_PATHS; do
                echo "-> building three packagelists..."
                read_packageset "../$PKG_SET"
                start_build "$RELEASE_LINK$CONF_TARGET/$subtarget$imagebuilder" "$PKG_SET"
            done
        else
            echo "-> building one packagelist only..."
            start_build "$RELEASE_LINK$CONF_TARGET/$subtarget$imagebuilder"
        fi
    done
    exit
fi
