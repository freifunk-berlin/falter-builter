#!/bin/bash

#set -e

# get some build-config
source buildconfig.conf

RELEASES="
    https://downloads.openwrt.org/releases/19.07.5/targets/
    https://downloads.openwrt.org/releases/19.07.6/targets/
    https://downloads.openwrt.org/snapshots/targets/"

FALTER_REPO_BASE="src/gz openwrt_falter http://buildbot.berlin.freifunk.net/buildbot/feed/openwrt-19.07"

FREIFUNK_RELEASE=""


function read_packageset {
	local PACKAGE_SET_PATH=$1
	# read packageset, while removing comments, empty lines and newlines
	PACKAGE_SET=$(cat $PACKAGE_SET_PATH | sed -e '/^#/d; /^[[:space:]]*$/d' | tr '\n' ' ')
}

function fetch_subdirs {
    URL=$1
    curl -s $URL | grep href | grep -v 'snapshots\|releases' | awk -F'"' '{print $4}'
}

function derive_branch_from_url {
    URL=$1
    RELEASE_TYPE=$(echo $URL | awk -F'/' '{print $4}')
    case $RELEASE_TYPE in
      releases)
        echo $URL | awk -F'/' '{print $5}' | cut -d. -f1-2
      ;;
      snapshots)
        echo snapshot
      ;;
    esac
}

function generate_embedded_files {
    FALTERBRANCH="$1"
    # call scripts to generate dynamic data in embedded files
    local TARGET=$(echo $IMAGE_BUILDER_URL | cut -d'/' -f 7)
    local SUBTARGET=$(echo $IMAGE_BUILDER_URL | cut -d'/' -f 8)

    # Get the FREIFUNK_RELEASE variable from the falter/packages repo
    # located in the falter-common package.
    [ "snapshot" == $FALTERBRANCH ] && FALTERBRANCH="master"
    [ $FALTERBRANCH != "master" ] && FALTERBRANCH="openwrt-$FALTERBRANCH"
    local TMP=$(curl -q https://raw.githubusercontent.com/Freifunk-Spalter/packages/$FALTERBRANCH/packages/falter-common/files-common/etc/freifunk_release)
    eval $TMP

    ../../scripts/01-generate_banner.sh $FREIFUNK_RELEASE $NICKNAME $TARGET $SUBTARGET
    ../../scripts/03-luci-footer.sh $FREIFUNK_RELEASE $NICKNAME $TARGET $SUBTARGET $FREIFUNK_OPENWRT_BASE
    export FALTER_REPO_BASE # export repo line to inject into images. contains whitespace...
    ../../scripts/04-include-falter-feed.sh
}

function start_build {
    IMAGE_BUILDER_URL=$1
    local TMP=$2 # slice packageset-name from path
    local PKG_SET=$(echo $TMP | rev | cut -d'/' -f1 | rev | cut -d'.' -f1)
    local DEVICE=$3
    FILENAME=$(basename $IMAGE_BUILDER_URL)
    FOLDERNAME=$(basename $FILENAME .tar.xz)
    BRANCH=$(derive_branch_from_url $IMAGE_BUILDER_URL)
    echo "building using: $IMAGE_BUILDER_URL"
    echo "selected branch: $BRANCH"

    # only download imagebuilder, if we didn't have it from previous packagelist-build
    echo $PWD
    if [ ! -f $FILENAME ]; then
		wget $IMAGE_BUILDER_URL
    fi
    rm -rf $FOLDERNAME
    tar -xJf $FILENAME
    
    cd $FOLDERNAME

    case $BRANCH in
      snapshot)
        ispos=7
	;;
      *)
        ispos=8
	;;
    esac

    INSTR_SET=$(grep "openwrt_base" repositories.conf | awk -F'/' "{print \$$ispos}")
    echo "selected instruction set: $INSTR_SET"

    #REPO="$FALTER_REPO_BASE/19.07/$INSTR_SET/falter"
    REPO="$FALTER_REPO_BASE/packages/$INSTR_SET/falter"
    echo "injecting repo line: $REPO"
    echo "$REPO" >> repositories.conf

    #local URL=$(echo $FALTER_REPO_BASE | cut -d' ' -f3)
    #echo "loading package-feed key from $URL/key-build.pub"
    #curl "$URL/key-build.pub" > keys/3169149e744f86a1
    #curl "http://buildbot.berlin.freifunk.net/buildbot/feed/packagefeed_master.pub" > keys/3169149e744f86a1

    generate_embedded_files $BRANCH
    if [ -z $DEVICE ]; then
      for profile in $(make info | grep ":$" | cut -d: -f1 | grep -v "Available Profiles" | grep -v "Default"); do
          echo "start building $profile..."
          make image PROFILE="$profile" PACKAGES="$PACKAGE_SET" FILES="../../embedded-files/" EXTRA_IMAGE_NAME="freifunk-falter-${FREIFUNK_RELEASE}"
          echo "finished"
      done
    else
      echo "start building $DEVICE..."
      make image PROFILE="$DEVICE" PACKAGES="$PACKAGE_SET" FILES="../../embedded-files/" EXTRA_IMAGE_NAME="freifunk-falter-${FREIFUNK_RELEASE}"
    fi
    # move binaries into central firmware-dir, sort them for packagesets, there was given one.
    if [ $PKG_SET ]; then
		rsync -a --remove-source-files bin/targets/* ../../firmwares/$PKG_SET/
    else
		rsync -a --remove-source-files bin/targets/* ../../firmwares/
    fi

    cd ..
}


##############
#    MAIN    #
##############

if [ "$1" == "all" ]; then
	# build all imageflavours. For this, get paths of packagesets
	VER=$2
	# fetch paths of packagelists (depends on openwrt-version). If not unique, chose most recent version of possibilities.
	PSET_PATHS=$(find packageset | sort | grep -e "/$VER" | grep .txt | tail -n3)
	echo $PSET_PATHS
	#exit
else
	read_packageset "$1"
fi
# shift packagelist-arg away.
shift


# remove artifacts of last build
mkdir -p firmwares
rm -rf firmwares/*
mkdir -p build
rm -rf build/*
cd build


# read command-line parameters
if [ $# -gt 0 ]; then
	CONF_RELEASE="$1"
	CONF_TARGET="$2"
	CONF_SUBTARGET="$3"
	CONF_DEVICE="$4"
fi


if [ -z "$CONF_RELEASE" ] && [ -z "$CONF_TARGET" ]; then
	# build all targets for all releases
	for release in $RELEASES; do
	    for target in $(fetch_subdirs $release); do
	        for subtarget in $(fetch_subdirs $release$target); do
		    imagebuilder=$(fetch_subdirs $release$target$subtarget | grep imagebuilder)
		    start_build $release$target$subtarget$imagebuilder
	        done
	    done
	done
	exit
elif [ -z "$CONF_TARGET" ]; then
	# build one release for all targets
	# fetch release-link. in case there is more than one, fetch recent release.
	RELEASE_LINK=$(echo "$RELEASES" | tr ' ' '\n' | grep "$CONF_RELEASE" | tail -n 1)
	for target in $(fetch_subdirs "$RELEASE_LINK"); do
		for subtarget in $(fetch_subdirs $RELEASE_LINK$target); do
			imagebuilder=$(fetch_subdirs $RELEASE_LINK$target$subtarget | grep imagebuilder)
		    start_build $RELEASE_LINK$target$subtarget$imagebuilder
	    done
	done
	exit
else
	# there was given a release and a target
	RELEASE_LINK=$(echo "$RELEASES" | tr ' ' '\n' | grep "$CONF_RELEASE" | tail -n 1)
	# if there was defined a subtarget and option device, only build that.
	if [ -n "$CONF_SUBTARGET" ]; then
		# build directly that subtarget. if requested, for all image types.
		TARGET_LIST="$RELEASE_LINK$CONF_TARGET/$CONF_SUBTARGET/"
		IMAGEBUILDER=$(fetch_subdirs "$TARGET_LIST" | grep imagebuilder)
		if [ "$PSET_PATHS" ]; then
			for PKG_SET in $PSET_PATHS; do
				echo "BUILDING 3 PACKAGELISTS"
				read_packageset "../$PKG_SET"
				start_build "$TARGET_LIST$IMAGEBUILDER" $PKG_SET $CONF_DEVICE
			done
		else
			echo "BUILDING 1 PACKAGLIST"
			start_build "$TARGET_LIST$IMAGEBUILDER" targets $CONF_DEVICE
		fi
		exit
	fi
	# otherwise, fetch all subtargets and build them one after another.
		for subtarget in $(fetch_subdirs "$RELEASE_LINK$CONF_TARGET/"); do
			imagebuilder=$(fetch_subdirs "$RELEASE_LINK$CONF_TARGET/$subtarget" | grep imagebuilder)
			if [ "$PSET_PATHS" ]; then
				for PKG_SET in $PSET_PATHS; do
					echo "BUILDING 3 PACKAGELISTS"
					read_packageset "../$PKG_SET"
					start_build "$RELEASE_LINK$CONF_TARGET/$subtarget$imagebuilder" $PKG_SET
				done
		    else
				echo "BUILDING 1 PACKAGLIST"
				start_build "$RELEASE_LINK$CONF_TARGET/$subtarget$imagebuilder"
		    fi
	    done
	exit
fi
