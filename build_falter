#!/bin/bash


RELEASES="
    https://downloads.openwrt.org/releases/19.07.4/targets/
    https://downloads.openwrt.org/snapshots/targets/"

FALTER_REPO_BASE="src/gz openwrt_falter http://download-master.berlin.freifunk.net/falter-feed"

# read packageset, while removing comments, empty lines and newlines
PACKAGE_SET=$(cat $1 | sed -e '/^#/d; /^[[:space:]]*$/d' | tr '\n' ' ')
shift


function fetch_subdirs {
    URL=$1
    curl -s $URL | grep href | grep -v 'snapshots\|releases' | awk -F'"' '{print $4}'
}

function derive_branch_from_url {
    URL=$1
    RELEASE_TYPE=$(echo $URL | awk -F'/' '{print $4}')
    case $RELEASE_TYPE in
      releases)
        echo $URL | awk -F'/' '{print $5}' | cut -d. -f1-2
      ;;
      snapshots)
        echo snapshot
      ;;
    esac
}

function start_build {
    IMAGE_BUILDER_URL=$1
    FILENAME=$(basename $IMAGE_BUILDER_URL)
    FOLDERNAME=$(basename $FILENAME .tar.xz)
    BRANCH=$(derive_branch_from_url $IMAGE_BUILDER_URL)
    echo "building using: $IMAGE_BUILDER_URL"
    echo "selected branch: $BRANCH"

    wget $IMAGE_BUILDER_URL
    tar -xJf $FILENAME
    rm -f $FILENAME
    
    cd $FOLDERNAME

    case $BRANCH in
      snapshot)
        ispos=7
	;;
      *)
        ispos=8
	;;
    esac

    INSTR_SET=$(grep "openwrt_base" repositories.conf | awk -F'/' "{print \$$ispos}")
    echo "selected instruction set: $INSTR_SET"

    #REPO="$FALTER_REPO_BASE/$BRANCH/$INSTR_SET"
    REPO="$FALTER_REPO_BASE/19.07.4/packages/$INSTR_SET/falter"
    echo "injecting repo line: $REPO"
    echo "$REPO" >> repositories.conf

    for profile in $(make info | grep ":$" | grep "Default" -A1000 | cut -d: -f1 | grep -v "Default"); do
        echo "start building $profile..."
	make image PROFILE="$profile" PACKAGES="$PACKAGE_SET"
	echo "finished"
    done

    cd ..
}

mkdir -p build
rm -rf build/*
cd build


# read command-line parameters
if [ $# -gt 0 ]; then
	CONF_RELEASE="$1"
	CONF_TARGET="$2"
fi


if [ -z "$CONF_RELEASE" ] && [ -z "$CONF_TARGET" ]; then
	# build all targets for all releases
	for release in $RELEASES; do
	    for target in $(fetch_subdirs $release); do
	        for subtarget in $(fetch_subdirs $release$target); do
		    imagebuilder=$(fetch_subdirs $release$target$subtarget | grep imagebuilder)
		    start_build $release$target$subtarget$imagebuilder
	        done
	    done
	done
	exit
elif [ -z "$CONF_TARGET" ]; then
	# build one release for all targets
	# fetch release-link. in case there is more than one, fetch recent release.
	RELEASE_LINK=$(echo "$RELEASES" | tr ' ' '\n' | grep "$CONF_RELEASE" | tail -n 1)
	for target in $(fetch_subdirs "$RELEASE_LINK"); do
		for subtarget in $(fetch_subdirs $RELEASE_LINK$target); do
			imagebuilder=$(fetch_subdirs $RELEASE_LINK$target$subtarget | grep imagebuilder)
		    start_build $RELEASE_LINK$target$subtarget$imagebuilder
	    done
	done
	exit
else
	# there was given a release and a target
	RELEASE_LINK=$(echo "$RELEASES" | tr ' ' '\n' | grep "$CONF_RELEASE" | tail -n 1)
	echo $(fetch_subdirs "$RELEASE_LINK$CONF_TARGET/")
		for subtarget in $(fetch_subdirs "$RELEASE_LINK$CONF_TARGET/"); do
			imagebuilder=$(fetch_subdirs "$RELEASE_LINK$CONF_TARGET/$subtarget" | grep imagebuilder)
		    start_build "$RELEASE_LINK$CONF_TARGET/$subtarget$imagebuilder"
	    done
	exit
fi



